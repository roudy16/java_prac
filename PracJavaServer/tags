!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Action	./src\jpserver\RequestHandler.java	/^    private enum Action {$/;"	g	class:RequestHandler
Client	./src\jpclient\Client.java	/^public class Client {$/;"	c
ClientOrchestrator	./src\jpclient\ClientOrchestrator.java	/^    private ClientOrchestrator() {$/;"	m	class:ClientOrchestrator	file:
ClientOrchestrator	./src\jpclient\ClientOrchestrator.java	/^public final class ClientOrchestrator {$/;"	c
ClientProcess	./src\jpclient\ClientOrchestrator.java	/^        private ClientProcess() {$/;"	m	class:ClientOrchestrator.ClientProcess	file:
ClientProcess	./src\jpclient\ClientOrchestrator.java	/^    private final class ClientProcess {$/;"	c	class:ClientOrchestrator
ClientState	./src\jpclient\ClientOrchestrator.java	/^    private enum ClientState {$/;"	g	class:ClientOrchestrator
ConsoleInputReaderThread	./src\jpclient\ClientOrchestrator.java	/^        private ConsoleInputReaderThread(InputStream is) {$/;"	m	class:ClientOrchestrator.ConsoleInputReaderThread	file:
ConsoleInputReaderThread	./src\jpclient\ClientOrchestrator.java	/^    private final class ConsoleInputReaderThread extends Thread {$/;"	c	class:ClientOrchestrator
Constants	./src\jputils\Constants.java	/^public class Constants {$/;"	c
ERROR	./src\jpserver\RequestHandler.java	/^    private static final String ERROR = "ERROR";$/;"	f	class:RequestHandler	file:
EXIT_MSG	./src\jpclient\Client.java	/^    private static final String EXIT_MSG = "exiting...";$/;"	f	class:Client	file:
Functions	./src\jputils\Functions.java	/^public class Functions {$/;"	c
HOSTNAME	./src\jpclient\ClientOrchestrator.java	/^    private static final String HOSTNAME = "localhost";$/;"	f	class:ClientOrchestrator	file:
INSTANCE	./src\jpclient\ClientOrchestrator.java	/^    public static final ClientOrchestrator INSTANCE = new ClientOrchestrator();$/;"	f	class:ClientOrchestrator
NONE	./src\jpserver\RequestHandler.java	/^        NONE,$/;"	e	enum:RequestHandler.Action	file:
NUM_WORKERS	./src\jpserver\Server.java	/^    private static final int NUM_WORKERS = 7;$/;"	f	class:Server	file:
PORT	./src\jpclient\ClientOrchestrator.java	/^    private static final String PORT = Integer.toString(Constants.PORT);$/;"	f	class:ClientOrchestrator	file:
PORT	./src\jputils\Constants.java	/^    public static final int PORT = 8010;$/;"	f	class:Constants
PREEXECUTE	./src\jpclient\ClientOrchestrator.java	/^        PREEXECUTE,$/;"	e	enum:ClientOrchestrator.ClientState	file:
Request	./src\jpclient\Client.java	/^        private Request(String action, int num) {$/;"	m	class:Client.Request	file:
Request	./src\jpclient\Client.java	/^    private static final class Request {$/;"	c	class:Client
Request	./src\jpserver\RequestHandler.java	/^        private Request(String data) {$/;"	m	class:RequestHandler.Request	file:
Request	./src\jpserver\RequestHandler.java	/^    private final class Request {$/;"	c	class:RequestHandler
RequestHandler	./src\jpserver\RequestHandler.java	/^    public RequestHandler(Socket clientSock) {$/;"	m	class:RequestHandler
RequestHandler	./src\jpserver\RequestHandler.java	/^public class RequestHandler implements Runnable {$/;"	c
RequestResult	./src\jpserver\RequestHandler.java	/^        private RequestResult(String resp, int err) {$/;"	m	class:RequestHandler.RequestResult	file:
RequestResult	./src\jpserver\RequestHandler.java	/^    private final class RequestResult {$/;"	c	class:RequestHandler
SHOW_FORMAT	./src\jpclient\ClientOrchestrator.java	/^    private static final String SHOW_FORMAT = "%-4s %-37s %-12s\\n";$/;"	f	class:ClientOrchestrator	file:
SORT	./src\jpserver\RequestHandler.java	/^        SORT$/;"	e	enum:RequestHandler.Action	file:
STANDBY_FOR_INPUT	./src\jpclient\ClientOrchestrator.java	/^        STANDBY_FOR_INPUT,$/;"	e	enum:ClientOrchestrator.ClientState	file:
SUCCESS	./src\jpserver\RequestHandler.java	/^    private static final String SUCCESS = "SUCCESS";$/;"	f	class:RequestHandler	file:
Server	./src\jpserver\Server.java	/^public class Server {$/;"	c
TERMINATED	./src\jpclient\ClientOrchestrator.java	/^        TERMINATED$/;"	e	enum:ClientOrchestrator.ClientState	file:
WAITING_FOR_SERVER	./src\jpclient\ClientOrchestrator.java	/^        WAITING_FOR_SERVER,$/;"	e	enum:ClientOrchestrator.ClientState	file:
WAIT_TIME	./src\jpclient\ClientOrchestrator.java	/^        private static final int WAIT_TIME = 100; \/\/ milliseconds to wait for input if none read$/;"	f	class:ClientOrchestrator.ConsoleInputReaderThread	file:
addProcToMap	./src\jpclient\ClientOrchestrator.java	/^    private boolean addProcToMap(ClientProcess cproc) {$/;"	m	class:ClientOrchestrator	file:
clearAndResizeSbIfNeeded	./src\jputils\Functions.java	/^    private static void clearAndResizeSbIfNeeded(StringBuilder sb0) {$/;"	m	class:Functions	file:
client	./src\jpserver\RequestHandler.java	/^    private final Socket client;$/;"	f	class:RequestHandler	file:
clients	./src\jpclient\ClientOrchestrator.java	/^    private final LinkedHashMap<Integer, ClientProcess> clients;$/;"	f	class:ClientOrchestrator	file:
consoleInLines	./src\jpclient\ClientOrchestrator.java	/^    private final ConcurrentLinkedDeque<String> consoleInLines;$/;"	f	class:ClientOrchestrator	file:
consoleThread	./src\jpclient\ClientOrchestrator.java	/^    private final ConsoleInputReaderThread consoleThread;$/;"	f	class:ClientOrchestrator	file:
content	./src\jpclient\Client.java	/^        private String content;$/;"	f	class:Client.Request	file:
content	./src\jpserver\RequestHandler.java	/^        private final String content;$/;"	f	class:RequestHandler.Request	file:
endProcess	./src\jpclient\ClientOrchestrator.java	/^        private void endProcess() {$/;"	m	class:ClientOrchestrator.ClientProcess	file:
errCode	./src\jpserver\RequestHandler.java	/^        private final int errCode;$/;"	f	class:RequestHandler.RequestResult	file:
finalize	./src\jpclient\ClientOrchestrator.java	/^        public void finalize() {$/;"	m	class:ClientOrchestrator.ClientProcess
finalize	./src\jpclient\ClientOrchestrator.java	/^        public void finalize() {$/;"	m	class:ClientOrchestrator.ConsoleInputReaderThread
genIntegerListStr	./src\jpclient\Client.java	/^        private String genIntegerListStr(int num) {$/;"	m	class:Client.Request	file:
getContent	./src\jpclient\Client.java	/^        private String getContent() {$/;"	m	class:Client.Request	file:
getContent	./src\jpserver\RequestHandler.java	/^        private String getContent() {$/;"	m	class:RequestHandler.Request	file:
getErrCode	./src\jpserver\RequestHandler.java	/^        private int getErrCode() {$/;"	m	class:RequestHandler.RequestResult	file:
getID	./src\jpserver\RequestHandler.java	/^        private UUID getID() {$/;"	m	class:RequestHandler.Request	file:
getNextAvailableIndex	./src\jpclient\ClientOrchestrator.java	/^    private Integer getNextAvailableIndex() {$/;"	m	class:ClientOrchestrator	file:
getOutput	./src\jpclient\ClientOrchestrator.java	/^        private String getOutput() throws IOException {$/;"	m	class:ClientOrchestrator.ClientProcess	file:
getResponse	./src\jpclient\Client.java	/^    private static String getResponse(BufferedReader sockReader, StringBuilder sb0) {$/;"	m	class:Client	file:
getResponse	./src\jpserver\RequestHandler.java	/^        private String getResponse() {$/;"	m	class:RequestHandler.RequestResult	file:
getServerSocket	./src\jpserver\RequestHandler.java	/^    public final ServerSocket getServerSocket() {$/;"	m	class:RequestHandler
id	./src\jpclient\ClientOrchestrator.java	/^        private final UUID id;$/;"	f	class:ClientOrchestrator.ClientProcess	file:
id	./src\jpserver\RequestHandler.java	/^        private final UUID id;$/;"	f	class:RequestHandler.Request	file:
in	./src\jpclient\ClientOrchestrator.java	/^        private BufferedReader in;$/;"	f	class:ClientOrchestrator.ConsoleInputReaderThread	file:
issueSortCommands	./src\jpclient\ClientOrchestrator.java	/^    private static void issueSortCommands(int num) {$/;"	m	class:ClientOrchestrator	file:
jpclient	./src\jpclient\Client.java	/^package jpclient;$/;"	p
jpclient	./src\jpclient\ClientOrchestrator.java	/^package jpclient;$/;"	p
jpserver	./src\jpserver\RequestHandler.java	/^package jpserver;$/;"	p
jpserver	./src\jpserver\Server.java	/^package jpserver;$/;"	p
jputils	./src\jputils\Constants.java	/^package jputils;$/;"	p
jputils	./src\jputils\Functions.java	/^package jputils;$/;"	p
launchNewClientProcess	./src\jpclient\ClientOrchestrator.java	/^    private void launchNewClientProcess() {$/;"	m	class:ClientOrchestrator	file:
main	./src\jpclient\Client.java	/^    public static void main(String[] args) {$/;"	m	class:Client
main	./src\jpclient\ClientOrchestrator.java	/^    public static void main (String[] args) {$/;"	m	class:ClientOrchestrator
main	./src\jpserver\RequestHandler.java	/^    public static void main(String[] args) {$/;"	m	class:RequestHandler
main	./src\jpserver\Server.java	/^    public static void main(String[] args) {$/;"	m	class:Server
nextNewIndex	./src\jpclient\ClientOrchestrator.java	/^    private int nextNewIndex;$/;"	f	class:ClientOrchestrator	file:
parseAction	./src\jpserver\RequestHandler.java	/^    private Action parseAction(String str) {$/;"	m	class:RequestHandler	file:
printProcessOutput	./src\jpclient\ClientOrchestrator.java	/^    private static void printProcessOutput(ClientProcess cp, StringBuilder sb) throws IOException {$/;"	m	class:ClientOrchestrator	file:
printShowHeader	./src\jpclient\ClientOrchestrator.java	/^    private static void printShowHeader() {$/;"	m	class:ClientOrchestrator	file:
proc	./src\jpclient\ClientOrchestrator.java	/^        private Process proc;$/;"	f	class:ClientOrchestrator.ClientProcess	file:
processCommand	./src\jpclient\ClientOrchestrator.java	/^    private static boolean processCommand(String cmd) {$/;"	m	class:ClientOrchestrator	file:
processExitCommand	./src\jpclient\ClientOrchestrator.java	/^    private static void processExitCommand() {$/;"	m	class:ClientOrchestrator	file:
processKillCommand	./src\jpclient\ClientOrchestrator.java	/^    private static void processKillCommand(String[] words) {$/;"	m	class:ClientOrchestrator	file:
processReq	./src\jpserver\RequestHandler.java	/^    private RequestResult processReq(Request req) {$/;"	m	class:RequestHandler	file:
processShowCommand	./src\jpclient\ClientOrchestrator.java	/^    private static void processShowCommand(String[] words) {$/;"	m	class:ClientOrchestrator	file:
processSortCommand	./src\jpclient\ClientOrchestrator.java	/^    private static void processSortCommand(String[] words) {$/;"	m	class:ClientOrchestrator	file:
processSpawnCommand	./src\jpclient\ClientOrchestrator.java	/^    private static void processSpawnCommand(String[] words) {$/;"	m	class:ClientOrchestrator	file:
readLine	./src\jputils\Functions.java	/^    public static String readLine(BufferedReader reader, StringBuilder sb0) throws IOException {$/;"	m	class:Functions
recycleIndices	./src\jpclient\ClientOrchestrator.java	/^    private final TreeSet<Integer> recycleIndices;$/;"	f	class:ClientOrchestrator	file:
removeProcFromMap	./src\jpclient\ClientOrchestrator.java	/^    private ClientProcess removeProcFromMap(Integer index) {$/;"	m	class:ClientOrchestrator	file:
response	./src\jpserver\RequestHandler.java	/^        private final String response;$/;"	f	class:RequestHandler.RequestResult	file:
run	./src\jpclient\ClientOrchestrator.java	/^        public void run() {$/;"	m	class:ClientOrchestrator.ConsoleInputReaderThread
run	./src\jpserver\RequestHandler.java	/^    public final void run() {$/;"	m	class:RequestHandler
run	./src\jpserver\Server.java	/^    private static void run(int portNumber) {$/;"	m	class:Server	file:
sb	./src\jpclient\ClientOrchestrator.java	/^        private StringBuilder sb;$/;"	f	class:ClientOrchestrator.ClientProcess	file:
sb	./src\jpclient\ClientOrchestrator.java	/^        private StringBuilder sb;$/;"	f	class:ClientOrchestrator.ConsoleInputReaderThread	file:
sendCommand	./src\jpclient\ClientOrchestrator.java	/^        private void sendCommand(String cmd) throws IOException {$/;"	m	class:ClientOrchestrator.ClientProcess	file:
serverSocket	./src\jpserver\RequestHandler.java	/^    private ServerSocket serverSocket;$/;"	f	class:RequestHandler	file:
setProc	./src\jpclient\ClientOrchestrator.java	/^        private void setProc(Process pc) {$/;"	m	class:ClientOrchestrator.ClientProcess	file:
setServerSocket	./src\jpserver\RequestHandler.java	/^    public final void setServerSocket(ServerSocket sock) {$/;"	m	class:RequestHandler
setStdIn	./src\jpclient\ClientOrchestrator.java	/^        private boolean setStdIn() {$/;"	m	class:ClientOrchestrator.ClientProcess	file:
setStdOut	./src\jpclient\ClientOrchestrator.java	/^        private boolean setStdOut() {$/;"	m	class:ClientOrchestrator.ClientProcess	file:
sortRequest	./src\jpserver\RequestHandler.java	/^    private ArrayList<Integer> sortRequest(String[] reqWords) {$/;"	m	class:RequestHandler	file:
state	./src\jpclient\ClientOrchestrator.java	/^        private ClientState state;$/;"	f	class:ClientOrchestrator.ClientProcess	file:
stdin	./src\jpclient\ClientOrchestrator.java	/^        private BufferedWriter stdin;$/;"	f	class:ClientOrchestrator.ClientProcess	file:
stdout	./src\jpclient\ClientOrchestrator.java	/^        private BufferedReader stdout;$/;"	f	class:ClientOrchestrator.ClientProcess	file:
toResponseFormat	./src\jpserver\RequestHandler.java	/^    private String toResponseFormat(ArrayList<Integer> nums) {$/;"	m	class:RequestHandler	file:
